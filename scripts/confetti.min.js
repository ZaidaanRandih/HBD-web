window.ConfettiGenerator = function (params) {
    function randomValue(limit, floor) {
        if (!limit) limit = 1;
        var value = Math.random() * limit;
        return floor ? Math.floor(value) : value;
    }

    function createConfettiPiece() {
        return {
            prop: settings.props[randomValue(settings.props.length, true)],
            x: randomValue(settings.width),
            y: randomValue(settings.height),
            radius: randomValue(4) + 1,
            line: Math.floor(randomValue(65) - 30),
            angles: [randomValue(10, true) + 2, randomValue(10, true) + 2, randomValue(10, true) + 2, randomValue(10, true) + 2],
            color: settings.colors[randomValue(settings.colors.length, true)],
            rotation: randomValue(360, true) * Math.PI / 180,
            speed: randomValue(settings.clock / 7) + settings.clock / 30
        };
    }

    function drawConfettiPiece(piece) {
        var opacity = piece.radius <= 3 ? 0.4 : 0.8;
        context.fillStyle = context.strokeStyle = "rgba(" + piece.color + ", " + opacity + ")";
        context.beginPath();

        switch (piece.prop) {
            case "circle":
                context.moveTo(piece.x, piece.y);
                context.arc(piece.x, piece.y, piece.radius * settings.size, 0, 2 * Math.PI, true);
                context.fill();
                break;
            case "triangle":
                context.moveTo(piece.x, piece.y);
                context.lineTo(piece.x + piece.angles[0] * settings.size, piece.y + piece.angles[1] * settings.size);
                context.lineTo(piece.x + piece.angles[2] * settings.size, piece.y + piece.angles[3] * settings.size);
                context.closePath();
                context.fill();
                break;
            case "line":
                context.moveTo(piece.x, piece.y);
                context.lineTo(piece.x + piece.line * settings.size, piece.y + 5 * piece.radius);
                context.lineWidth = 2 * settings.size;
                context.stroke();
                break;
            case "square":
                context.save();
                context.translate(piece.x + 15, piece.y + 5);
                context.rotate(piece.rotation);
                context.fillRect(-15 * settings.size, -5 * settings.size, 15 * settings.size, 5 * settings.size);
                context.restore();
                break;
        }
    }

    var settings = {
        target: "confetti-holder",
        max: 80,
        size: 1,
        animate: true,
        props: ["circle", "square", "triangle", "line"],
        colors: [[165, 104, 246], [230, 61, 135], [0, 199, 228], [253, 214, 126]],
        clock: 25,
        interval: null,
        width: window.innerWidth,
        height: window.innerHeight
    };

    if (params) {
        if (params.target) settings.target = params.target;
        if (params.max) settings.max = params.max;
        if (params.size) settings.size = params.size;
        if (params.animate !== undefined && params.animate !== null) settings.animate = params.animate;
        if (params.props) settings.props = params.props;
        if (params.colors) settings.colors = params.colors;
        if (params.clock) settings.clock = params.clock;
        if (params.width) settings.width = params.width;
        if (params.height) settings.height = params.height;
    }

    var canvas = document.getElementById(settings.target);
    var context = canvas.getContext("2d");
    var confettiPieces = [];

    return {
        render: function () {
            function renderFrame() {
                context.clearRect(0, 0, settings.width, settings.height);
                for (var i in confettiPieces) {
                    drawConfettiPiece(confettiPieces[i]);
                }
                updateConfettiPieces();
            }

            function updateConfettiPieces() {
                for (var i = 0; i < settings.max; i++) {
                    var piece = confettiPieces[i];
                    if (settings.animate) piece.y += piece.speed;
                    if (piece.y > settings.height) {
                        confettiPieces[i] = piece;
                        confettiPieces[i].x = randomValue(settings.width, true);
                        confettiPieces[i].y = -10;
                    }
                }
            }

            canvas.width = settings.width;
            canvas.height = settings.height;
            confettiPieces = [];
            for (var i = 0; i < settings.max; i++) {
                confettiPieces.push(createConfettiPiece());
            }

            if (settings.animate) {
                settings.interval = setInterval(renderFrame, 20);
            } else {
                renderFrame();
            }
        },
        clear: function () {
            context.clearRect(0, 0, canvas.width, canvas.height);
            var width = canvas.width;
            canvas.width = 1;
            canvas.width = width;
            clearInterval(settings.interval);
        }
    };
};window.ConfettiGenerator=function(e){function t(e,t){e||(e=1);var i=Math.random()*e;return t?Math.floor(i):i}function i(){return{prop:a.props[t(a.props.length,!0)],x:t(a.width),y:t(a.height),radius:t(4)+1,line:Math.floor(t(65)-30),angles:[t(10,!0)+2,t(10,!0)+2,t(10,!0)+2,t(10,!0)+2],color:a.colors[t(a.colors.length,!0)],rotation:t(360,!0)*Math.PI/180,speed:t(a.clock/7)+a.clock/30}}function r(e){var t=e.radius<=3?.4:.8;switch(n.fillStyle=n.strokeStyle="rgba("+e.color+", "+t+")",n.beginPath(),e.prop){case"circle":n.moveTo(e.x,e.y),n.arc(e.x,e.y,e.radius*a.size,0,2*Math.PI,!0),n.fill();break;case"triangle":n.moveTo(e.x,e.y),n.lineTo(e.x+e.angles[0]*a.size,e.y+e.angles[1]*a.size),n.lineTo(e.x+e.angles[2]*a.size,e.y+e.angles[3]*a.size),n.closePath(),n.fill();break;case"line":n.moveTo(e.x,e.y),n.lineTo(e.x+e.line*a.size,e.y+5*e.radius),n.lineWidth=2*a.size,n.stroke();break;case"square":n.save(),n.translate(e.x+15,e.y+5),n.rotate(e.rotation),n.fillRect(-15*a.size,-5*a.size,15*a.size,5*a.size),n.restore()}}var a={target:"confetti-holder",max:80,size:1,animate:!0,props:["circle","square","triangle","line"],colors:[[165,104,246],[230,61,135],[0,199,228],[253,214,126]],clock:25,interval:null,width:window.innerWidth,height:window.innerHeight};e&&(e.target&&(a.target=e.target),e.max&&(a.max=e.max),e.size&&(a.size=e.size),void 0!==e.animate&&null!==e.animate&&(a.animate=e.animate),e.props&&(a.props=e.props),e.colors&&(a.colors=e.colors),e.clock&&(a.clock=e.clock),e.width&&(a.width=e.width),e.height&&(a.height=e.height));var o=document.getElementById(a.target),n=o.getContext("2d"),l=[];return{render:function(){function e(){n.clearRect(0,0,a.width,a.height);for(var e in l)r(l[e]);s()}function s(){for(var e=0;e<a.max;e++){var i=l[e];a.animate&&(i.y+=i.speed),i.y>a.height&&(l[e]=i,l[e].x=t(a.width,!0),l[e].y=-10)}}o.width=a.width,o.height=a.height,l=[];for(var c=0;c<a.max;c++)l.push(i());return a.animate?a.interval=setInterval(e,20):e()},clear:function(){n.clearRect(0,0,o.width,o.height);var e=o.width;o.width=1,o.width=e,clearInterval(a.interval)}}};